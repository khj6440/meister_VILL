1) 요구사항에 맞게 컨트롤러를 구성
1-1. 컨트롤러 이름을 개체의 이름과 연관지어 작성   
StudentController
ManagerController

1-2. 컨트롤러 주소를 개체의 이름과 프로젝트 이름을 고려하여 작성   

/grade/student
/grade/manager

1-3. 컨트롤러의 세부 처리 주소를 작명 규칙을 고려하여 작성   

/grade/student/regist
/grade/student/list
/grade/student/update
/grade/student/delete

/grade/manager/regist
/grade/manager/list
/grade/manager/update
/grade/manager/delete


2) 요구사항에 맞게 서비스(Service), 리파지토리(Repository) 구현

2-1. 서비스 이름을 작명 규칙과 개체에 맞게 작성   

상위 인터페이스 - StudentService
하위 구현클래스 - StudentServiceImpl

상위 인터페이스 - ManagerService
하위 구현클래스 - ManagerServiceImpl

2-2. 리파지토리 이름을 작명 규칙과 개체에 맞게 작성   

상위 인터페이스 - StudentRepository
하위 구현클래스 - StudentRepositoryImpl

상위 인터페이스 - ManagerRepository
하위 구현클래스 - ManagerRepositoryImpl

3) 요구사항에 맞게 DTO 클래스의 코드를 작성

3-1. 학생 DTO 클래스의 코드를 제시된 개체에 맞게 작성   

import lombok.Data;

@Data
public class StudentDto{

private int studentNumber;
private String studentName;
private int koreanScore;
private int englishScore;
private int mathScore;
}

3-2. 매니저 DTO 클래스의 코드를 제시된 개체에 맞게 작성   

import lombok.Data;

@Data
public class ManagerDto{

private int managerNumber;
private String managerName;
private String managerHireDate;

}

4) 개체에 맞는 테이블 생성 구문 작성

4-1. 학생 개체에 맞는 테이블 생성 구문 작성   

create table student(

	student_number number primary key,
	student_name varchar2(21) not null,
	korean_score number not null,
	english_score number not null,
	math_score number not null


);

4-2. 매니저 개체에 맞는 테이블 생성 구문 작성   

create table manager(
	
	manager_number number primary key,
	manager_name varchar2(21) not null,
	manager_hire_date date not null
);
